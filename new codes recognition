#include"opencv2/opencv.hpp"
#include"opencv2/objdetect/objdetect.hpp"
#include"opencv2/imgproc/imgproc.hpp"
#include"opencv2/highgui/highgui.hpp"

#include <iostream>
#include<vector>
#include<fstream>
#include<sstream>
#include<stdlib.h>

using namespace cv;
using namespace std;

void Trainor(vector<Mat>&images, vector<int>&labels)
{

	int imageno = images.size();
	int labelno = labels.size();
	Mat data = asRowMatrix(images, CV_32F, 1.0, 0.0);
	PCA eigen(data, Mat(), PCA::DATA_AS_ROW);
	//get the mean 
	Mat Mean = eigen.mean;
	//project the eigaen face train to subspace
	Mat proj = eigen.project(data);
	//we now do the fisehr face training on the projected eigen subspace
	LDA fisher(proj, labels, (labelno - 1));

	// int the next step both PCA and LDA are combined
	Mat com;
	fisher.eigenvectors().convertTo(com, fisher.eigenvectors.type());
	Mat combine;
	gemm(eigen.eigenvectors, com, 1.0, Mat(), 0.0, combine, GEMM_1_T);

	//the next code gets the features of the new combined matrix
	Mat features;
	for (int j = 0; j < data.rows; j++)
	{
		Mat proj = LDA::subspaceProject(com, Mean, data.row(j));
		features.push_back(proj);
	}
}

Mat asRowMatrix(const vector<Mat>& src,int rtype,double alpha,double beta)
{
	size_t n = src.size();
	if (n == 0)
	{
		return Mat();
	}
		size_t d = src[0].total();
		Mat data(n, d, rtype);
		for (int i = 0; i < n; i++)
		{
			if (src[i].total() != d)
			{
				cout << "wrong number of elements int matrix" << endl;
			}
			Mat xi = data.row(i);
			if (src[i].isContinuous())
			{
				src[i].reshape(1, 1).convertTo(xi, rtype, alpha, beta);
			}
			else
			{
				src[i].clone().reshape(1, 1).convertTo(xi, rtype, alpha, beta);
			}
		}
	return data;
}
void detectfaces(Mat &image, vector<Rect_<int>> &faces)
{
	string path = "haarcascades\\haarcascade_frontalface_alt.xml";
		CascadeClassifier cascade;
		cascade.load(path);
		cascade.detectMultiScale(image, faces, 1.1, 3, 0 | CASCADE_SCALE_IMAGE, Size(30, 30));
}
int main()
{
	Mat image, gray;

	vector<Mat> images;
	vector<int> labels;

	int imagenumber = images.size();
	int labelsnumber = labels.size();

	VideoCapture cap(0);
	if (!cap.isOpened())
	{
		cout << "ERROR DETECTED: unable to open webcam" << endl;
		system("pause");
		return-1;
	}
	double width = cap.get(CV_CAP_PROP_FRAME_WIDTH);
	double height = cap.get(CV_CAP_PROP_FRAME_HEIGHT);

	cout << "frame size: " << width << "X" << height << endl;

	int default_pictures = 1,number_of_pictures;
	number_of_pictures = 4;
	namedWindow("pic", CV_WINDOW_AUTOSIZE);
	while (default_pictures <= number_of_pictures)
	{
		
		Mat frame;
		bool success= cap.read(frame);
		if (!success)
		{
			cout << "unable to read frames from video stream";
			system("pause");
			break;
		}
		imshow("pic", frame);
		imwrite(format("img%d.jpg", default_pictures), frame);

		image = imread(format("img%d.jpg",default_pictures));
		cvtColor(image, gray, CV_BGR2GRAY);
		vector<Rect_<int>> faces;
		detectfaces(gray, faces);
		for (int i = 0; i < faces.size(); i++)
		{
		Mat croped;
		croped = gray(faces[i]);
		rectangle(gray, faces[i], Scalar(0, 0, 0), 1, 8, 0);
		resize(croped, croped, Size(100, 100));
		imwrite("faces\\" + to_string(i) + ".jpg", croped);
		images.push_back(croped);
		labels.push_back(i);
		}
		Trainor(images, labels);
		/*
		int imageno = images.size();
		int labelno = labels.size();
		/////////the next lines of code shows the training process

		
		Mat data = asRowMatrix(images,CV_32F,1,0.0);
		PCA eigen(data, Mat(), PCA::DATA_AS_ROW);
		//get the mean 
		Mat Mean = eigen.mean;
		//project the eigaen face train to subspace
		Mat proj=eigen.project(data);
		//we now do the fisehr face training on the projected eigen subspace
		LDA fisher(proj, labels, (labelno - 1));

		// int the next step both PCA and LDA are combined
		Mat com;
		fisher.eigenvectors().convertTo(com, fisher.eigenvectors.type());
		Mat combine;
		gemm(eigen.eigenvectors, com, 1.0, Mat(), 0.0, combine, GEMM_1_T);

		//the next code gets the features of the new combined matrix
		Mat features;
		for (int j = 0; j < data.rows; j++)
		{
			Mat proj = LDA::subspaceProject(com, Mean, data.row(j));
			features.push_back(proj);
		}*/
		waitKey(3000);
		default_pictures++;
	}

		if (waitKey(30) == 27)
		{
			cout << "the use has pressed the Escape button.... the program will terminate" << endl;
		}
		return 0;
}
