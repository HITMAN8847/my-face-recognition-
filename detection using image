#include"opencv2/highgui/highgui.hpp"
#include"opencv2/imgproc/imgproc.hpp"
#include"opencv2/objdetect/objdetect.hpp"
#include<iostream>
#include<stdlib.h>

using namespace cv;
using namespace std;
int FaceDetect();
int main()
{
	VideoCapture cap(0);
	if (!cap.isOpened())
	{
		cout << "ERROR DETECTED: unable to open webcam" << endl;
		system("pause");
		return-1;
	}
	double width = cap.get(CV_CAP_PROP_FRAME_WIDTH);
	double height = cap.get(CV_CAP_PROP_FRAME_HEIGHT);

	cout << "frame size: " << width << "X" << height << endl;
//	cout << "enter the number of pictures you want to take " << endl;
	int default_pictures = 1,number_of_pictures;
//	cin >> number_of_pictures;
	number_of_pictures = 4;
	namedWindow("pic", CV_WINDOW_AUTOSIZE);
	while (default_pictures <= number_of_pictures)
	{
		
		Mat frame;
		bool success= cap.read(frame);
		if (!success)
		{
			cout << "unable to read frames from video stream";
			system("pause");
			break;
		}
		imshow("pic", frame);
		imwrite(format("img%d.jpg", default_pictures), frame);
		waitKey(3000);
		default_pictures++;
	}
	FaceDetect();
	return 0;

}



int FaceDetect()
{
	//	VideoCapture cap(0);
	//	cap.open(0);
	//	if (!cap.isOpened())
	//	{
	//		cout << "UNABLE TO OPEN WEBCAM" << endl;
	//		return -1;
	//	}

	Mat img, gray;

	//decalring a cascade classifier and loading the cascade library;
	CascadeClassifier detect;
	bool success = detect.load("C:\\haarcascades\\haarcascade_frontalface_alt2.xml");
	if (!success)
	{
		cout << "UNABLE TO LOAD CASCADE...PLEASE TRY AGAIN" << endl;
		system("pause");
		return -1;
	}

	// detection parameters
	int groundThreshold = 2;
	double stepScale = 2.2;
	Size minObjectSize(80, 80);
	Size maxObjectSize(200, 200);
	int zan1;

	vector<Rect>faces;
	for (zan1 = 1; zan1 <= 4; zan1++)
	{
		//cap >> img;
		Mat img = imread(format("img%d.jpg",zan1), CV_LOAD_IMAGE_UNCHANGED);

		if (img.empty())
		{
			cout << "IMAGE NOT FOUND" << endl;
				system("pause");
				return -1;
		}

		cvtColor(img, gray, CV_BGR2GRAY);
		faces.clear();
		detect.detectMultiScale(gray, faces, stepScale, groundThreshold, 0 | 2, minObjectSize, maxObjectSize);

		if (faces.size() > 0)
		{
			int i;
			for (i = 0; i < faces.size(); i++)
			{
				rectangle(img, faces[i].br(), faces[i].tl(), Scalar(0, 0, 100), 1, 8, 0);
			}
		}
		imshow("FACE-DETECTED", img);

		if (waitKey(30) == 27)
		{
			cout << "Esc has been pressed by the user....so the program will shut down" << endl;
			break;
		}
		system("pause");
	}
	return 0;
}

